우리는 왜 회원 기능을 배워야할까?
    - 서비스 제공 시 제공받을 사람을 골라서 받겠다
    - 악성 사용자X, 인증된 회원들에게만 제공
    -> 원하는 사람들에게만 서비스를 제공하겠다!

난이도
    - 회원 기능: 기본기의 끝판왕(CRUD, 세션&쿠키)
    -> 커리큘럼 외에 추가로 학습해야할 키워드: JWT, OAuth2.0 등

구현하기 위해 알아야 할 내용
- 세션(session)
    - 클라이언트(브라우저)로부터 오는 일련의 요청을 하나의 상태로 보고 그 상태를 유지하는 기술
    - 한 사람이 여러 요청을 보내는구나! 라는 것을 서버측에서 알게 하기 위한 기술
    - 즉 내가 누구인지 서버측에 알려줘야한다.
- 왜 세션이라는 기술이 필요할까?
    - http라는 프로토콜(통신 규약)을 통해 서버측으로 데이터를 요청 및 전송하기 위해
    - http의 특성(암기필요!)
        - 비연결 지향: 서버가 응답을 한 번 보내고 나면 연결을 끊는다.
            - 이유: 서버의 부담을 줄여주기 위해
        - 무상태: 연결을 끊는 순간, 클라이언트 정보를 유지하지 않는다.
            - 상태: 이전 정보
- 세션을 통해서 상태를 유지시켜 준다.
    - 서버로 요청을 보낼 때마다 쿠키에 session id를 담아서 전송

- 쿠키 인증 vs 세션 인증 vs 토큰 인증
    - 왜 하필 세션 인증 방식을 활용할까?
        - 장고가 기본적으로 세션 인증 방식을 쓰도록 구현이 되어있다.
    - 셋의 차이점은?
        - 세션 인증
            - 특징: 클라이언트는 session id만 전송해주면 된다.
            - 장점: 서버측에서 유저 정보를 관리하기 때문에 보안이 좋다.
                    세션 만료 기간으로만 관리하면 되므로, 관리가 쉽다.
            - 단점: 서버 측에서 해야할 게 많다.(인증, 보안 등등)
                    -> 서버 부담이 커진다.(비용 증가)
        - 쿠키 인증
            - 특징: 유저 정보를 브라우저의 쿠키에 저장 + 서버로 전송
            - 장점: 서버 자원을 절약할 수 있다.
                    구현이 쉽다.
            - 단점: 보안이 취약하다.
                    쿠키의 크기 제한(약 4kb)이 있어 많은 정보를 저장할 수 없다.
        - 토큰 인증(2학기 프로젝트에서 주로 사용 예정)
            - 특징: 로그인 시 토큰을 받아서, 요청마다 토큰을 헤더에 포함해서 전달
            - 장점: 서버 자원을 절약할 수 있다.
            - 단점: 토큰이 유출되면 위험(보안 취약 가능성)
            - 대표: JWT(JSON Web Token)
                - 토큰 인증 방식의 표준